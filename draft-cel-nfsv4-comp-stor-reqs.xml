<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc
 docName="draft-cel-nfsv4-comp-stor-reqs-latest"
 category="info"
 submissionType="IETF"
 xml:lang="en">

<front>

<title abbrev="Computational Storage for NFS">
Network File System Version 4 Requirements for Computational Storage
</title>

<author initials="C.L." surname="Lever" fullname="Charles Lever">
<organization abbrev="Oracle">Oracle Corporation</organization>
<address>
<postal>
<street></street>
<city></city>
<region></region>
<code></code>
<country>United States of America</country>
</postal>
<email>chuck.lever@oracle.com</email>
</address>
</author>

<date/>
<area>Transport</area>
<workgroup>Network File System Version 4</workgroup>

<abstract>
<t>
This document introduces an architecture
for supporting Computational Storage
on Network File System version 4 (NFS) servers and clients.
</t>
</abstract>

</front>

<middle>

<section
 title="Introduction"
 anchor="section:EE6A985D-D0FE-44EE-8BA0-77A61BE6D777">
<t>
True computational storage conforms to one or both
of the following criteria:
<list style="symbols">
<t>
Compute resources co-located with data storage leverages
a high bandwidth link between storage and local compute.
</t>
<t>
Compute resources co-located with data storage reduces
interrupt or data bandwidth needed between storage and host.
</t>
</list>
</t>
<t>
There are several broad use cases for computation offloaded to storage:
<list style="hanging">
<t hangText="Search:">
Examples include
SQL offload,
a machine learning inference engine co-located with its dataset,
or
performing a "find" operation without pulling
an entire filesystem's data to a client.
</t>
<t hangText="Filtering:">
Also known as data transformation.
Examples include
compression,
transcoding,
and
encryption.
</t>
<t hangText="Data Management:">
This might be a control plane that permits administrative actions such as
instantiating a transfer to cold storage,
integrity measurement (scrubbing),
or
creating a snapshot of a particular file.
</t>
</list>
</t>
<t>
For NFS, the mission of computational storage techniques is
to reduce network utilization between an NFS server and its clients.
NFSv4.2
<xref target="RFC7862"/>
already applies this approach --
features new to NFSv4.2 include
copy offload and file initialization (ALLOCATE),
both of which are intended to prevent extra data round-trips
between clients and server.
</t>
<t>
The purpose of the current document is to provide a framework
for discussing and reasoning about computational storage
relative to the NFS protocol.
</t>
</section>

<section
 title="Requirements Language"
 anchor="section:46199ACD-34F1-4ACB-B246-E18A022CAED9">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted
as described in BCP 14
<xref target="RFC2119"/>
<xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.
</t>
</section>

<section
 title="Parameters"
 anchor="section:2F82B858-25CD-4D9F-82A9-8D9D2C644190">
<t>
For various reasons,
we do not want to require changes to the NFS protocol to expose
computational resources.
Instead, an NFS server host can advertise alternate RPC programs
which allow NFS clients access to the server's computational services
in a structured fashion.
The underlying assumption is that such computation runs faster on a
host that can access file data directly rather than via NFS.
</t>
<t>
We expect that computational storage applications are
outside the realm of POSIX,
and therefore would be triggered directly by user space programs
rather than exclusively through a POSIX-based NFS client.
This is one reason that a side-channel approach is preferred,
rather than extending the NFS protocol itself.
</t>
<t>
An important class of input and output parameters for these remote
procedures are objects (e.g. files and directories) that exist in a
filesystem that is shared via NFS.
When they are local, such objects can be referenced by filehandle
and optionally a range of bytes.
To reference a remote object,
either an NFS URI
(defined in Section 2.8.1 of
<xref target="RFC7532"/>)
or
a tuple consisting of a network address and a filehandle may be used.
</t>
<t>
Serialization is often necessary to prevent an offload agent
from colliding with access by standard NFS clients.
Open state or a delegation might be necessary for this purpose.
</t>
<t>
As an example, suppose an RPC program is constructed to enable
the encryption and decryption of files on an NFS server.
The arguments to the encryption and decryption verbs might
include an input filehandle, an output filehandle (or an
indication that the transform should occur in place),
the selection of a cipher algorithm, and a key.
The result would be an indication of success or failure.
No data is transferred between the requesting client and
the server where the input and output files reside.
</t>
</section>

<section
 title="Security Considerations"
 anchor="section:2F987982-B9E8-4B76-8ACD-6EE148F5C185">
<t>
Unlike most block storage, NFS is typically deployed on open networks
rather than environments with limited access (such as a PCIe bus).
More attention must be focused on security.
In particular:
<list style="symbols">
<t>
A trust relationship must exist between clients and servers.
For example, how would clients be certain that the server has actually
encrypted a file's content?
</t>
<t>
There will need to be a mechanism for authorizing offload agents
to access file data on behalf of authenticated users.
</t>
</list>
</t>
</section>

<section
 title="IANA Considerations"
 anchor="section:527B4122-B58E-4E40-BA88-663E4A8F8532">
<t>
This document has no IANA actions.
</t>
</section>

</middle>

<back>

<references title="Normative References">
<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.7532.xml"?>
<?rfc include="reference.RFC.8174.xml"?>
</references>

<references title="Informative References">
<?rfc include="reference.RFC.7862.xml"?>
</references>

<section
 title="Acknowledgments"
 anchor="section:F3D386B1-76E1-43E4-A0C5-956D769E21DB"
 numbered="no">
<t>
The author is grateful to
Bill Baker,
Greg Marsden,
and
Jim Williams
for their input and support of this work.
</t>
<t>
Special thanks go to
Transport Area Director Magnus Westerlund,
NFSV4 Working Group Chairs Spencer Shepler and Brian Pawlowski,
and
NFSV4 Working Group Secretary Thomas Haynes
for their support.
</t>
</section>

</back>

</rfc>
