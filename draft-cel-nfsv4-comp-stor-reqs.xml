<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc
 docName="draft-cel-nfsv4-comp-stor-reqs-latest"
 category="info"
 submissionType="IETF"
 xml:lang="en">

<front>

<title abbrev="Computational Storage for NFS">
Network File System Version 4 Requirements for Computational Storage
</title>

<author initials="C.L." surname="Lever" fullname="Charles Lever">
<organization abbrev="Oracle">Oracle Corporation</organization>
<address>
<postal>
<street></street>
<city></city>
<region></region>
<code></code>
<country>United States of America</country>
</postal>
<email>chuck.lever@oracle.com</email>
</address>
</author>

<date/>
<area>Transport</area>
<workgroup>Network File System Version 4</workgroup>

<abstract>
<t>
This document introduces an architecture
for supporting Computational Storage
on Network File System version 4 (NFS) servers and clients.
</t>
</abstract>

</front>

<middle>

<section
 title="Introduction"
 anchor="section:EE6A985D-D0FE-44EE-8BA0-77A61BE6D777">
<t>
True computational storage conforms to one or both
of the following criteria:
<list style="symbols">
<t>
A compute resource co-located with data storage leverages
a high bandwidth link between that compute resource and storage.
</t>
<t>
A compute resource co-located with data storage reduces
interrupt or data bandwidth needed between storage and host.
</t>
</list>
</t>
<t>
There are several broad use cases for computation offloaded to storage:
<list style="hanging">
<t hangText="Search:">
Examples include
SQL offload,
a machine learning inference engine co-located with its dataset,
or
performing a "find" operation without pulling
an entire filesystem's data to a client.
</t>
<t hangText="Data Transformation:">
Examples include
compression,
transcoding,
and
encryption.
</t>
<t hangText="Data Management:">
This might be a control plane that permits administrative actions such as
instantiating a transfer to cold storage,
integrity measurement (scrubbing),
or
creating a snapshot of a particular file.
</t>
</list>
</t>
<t>
In some cases, computational storage is a computational service that is
available as a direct offload for a host CPU.
The source and sink data both reside in the host's memory.
For NFS, however, the mission of computational storage techniques is
to reduce network utilization between an NFS server and its clients.
Here, the source and sink are typically located in files on NFS servers;
the operation of the computational service is often transparent
to applications running on NFS clients.
</t>
<t>
NFSv4.2
<xref target="RFC7862"/>
already applies this approach --
features new to NFSv4.2 include
copy offload and file initialization (ALLOCATE),
both of which are intended to prevent extra data round-trips
between clients and server.
</t>
<t>
The purpose of the current document is to provide a framework
for discussing and reasoning about computational storage
relative to the NFS protocol and typical NFS deployments.
</t>
</section>

<section
 title="Requirements Language"
 anchor="section:46199ACD-34F1-4ACB-B246-E18A022CAED9">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted
as described in BCP 14
<xref target="RFC2119"/>
<xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.
</t>
</section>

<section
 title="Service Discovery"
 anchor="section:44C8EB81-6AAE-4A33-943C-575082EF08FC">
<t>
For various reasons,
we do not want to require changes to the NFS protocol to expose
computational storage resources.
Instead, an NFS server host can advertise RPC programs
which allow NFS clients to configure the server's computational services,
and the services then operate on data in files stored there.
CSS configuration programs can be advertised via the rpcbind service
<xref target="RFC1833"/>.
</t>
<t>
Typically a CSS configuration facility would register with the NFS server's
rpcbind service, advertising its listening port and RPC program number.
Administrative clients would then contact this service to configure it
for use.
</t>
</section>

<section
 title="Service Configuration"
 anchor="section:D0C221F2-43CE-43D7-A66E-C6AF3222274D">
<t>
A configuration program exposes the parameters of an individual CSS.
Such configuration might include the selection of encryption algorithms or keys,
or the specification of regular expressions or prepared SQL statements.
The location of the input dataset or results of a CSS might also be specified.
</t>
<t>
An important class of input and output parameters for configuration
programs are objects (e.g. files and directories) that exist in a
filesystem that is shared via NFS.
When they are local, such objects can be referenced by filehandle
and optionally a range of bytes.
To reference a remote object,
either an NFS URI
(defined in Section 2.8.1 of
<xref target="RFC7532"/>)
or
a tuple consisting of a network address and a filehandle may be used.
</t>
</section>

<section
 title="Service Operation"
 anchor="section:4AA2B988-B5E6-453E-B99E-39D94488A420">
<t>
There are two possible modes of operation:
<list style="hanging">
<t hangText="Transparent:">
After the computational service is configured, its operation occurs
behind NFS READ and WRITE operations, and is not directly visible to
NFS clients.
Examples of this mode include data reduction (e.g., deduplication)
and
encryption-at-rest.
</t>
<t hangText="Verbal:">
Clients would use a separate (RPC) protocol to initiate requests or
capture results, when the results are expected to be small, or are
not appropriate for storing into a file.
An example of this mode is invoking search operations over large datasets
where the results might a small set of filehandles with byte ranges.
</t>
</list>
</t>
<t>
Serialization is often necessary to prevent an offload agent
from colliding with accesses by standard NFS clients.
Open state or a delegation might be necessary for this purpose.
Alternatively, no locking would be provided via NFS, and the
applications themselves would be responsible for seeing that
the integrity of the input datasets is maintained during offloaded
operations.
</t>
</section>

<section
 title="Security Considerations"
 anchor="section:2F987982-B9E8-4B76-8ACD-6EE148F5C185">
<t>
Unlike most block storage, NFS is typically deployed on open networks
rather than environments with limited access (such as a PCIe bus).
In such open environments, extra attention must be focused on security.
In particular:
<list style="symbols">
<t>
Remote access to configuration programs and computational results
will need to be authenticated and authorized in some fashion.
The ONC RPC protocol itself
<xref target="RFC5531"/>
has authentication mechanisms, including mechanisms that use strong cryptography
<xref target="RFC7861"/>.
</t>
<t>
There will need to be a mechanism for authorizing offload agents
to access file data on behalf of authenticated users.
</t>
<t>
A trust relationship must exist between clients and servers.
For example, how would clients be certain that the server has actually
encrypted a file's content?
</t>
</list>
</t>
</section>

<section
 title="IANA Considerations"
 anchor="section:527B4122-B58E-4E40-BA88-663E4A8F8532">
<t>
This document has no IANA actions.
</t>
</section>

</middle>

<back>

<references title="Normative References">
<?rfc include="reference.RFC.1833.xml"?>
<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.5531.xml"?>
<?rfc include="reference.RFC.7532.xml"?>
<?rfc include="reference.RFC.8174.xml"?>
</references>

<references title="Informative References">
<?rfc include="reference.RFC.7861.xml"?>
<?rfc include="reference.RFC.7862.xml"?>
</references>

<section
 title="Acknowledgments"
 anchor="section:F3D386B1-76E1-43E4-A0C5-956D769E21DB"
 numbered="no">
<t>
The author is grateful to
Bill Baker,
Greg Marsden,
and
Jim Williams of Oracle,
and
Glenn Watkins of HPE
for their input and support of this work.
</t>
<t>
Special thanks go to
Transport Area Director Magnus Westerlund,
NFSV4 Working Group Chairs Spencer Shepler and Brian Pawlowski,
and
NFSV4 Working Group Secretary Thomas Haynes
for their support.
</t>
</section>

</back>

</rfc>
