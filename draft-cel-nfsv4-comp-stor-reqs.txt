



Network File System Version 4                                   C. Lever
Internet-Draft                                                    Oracle
Intended status: Informational                            April 24, 2019
Expires: October 26, 2019


  Network File System Version 4 Requirements for Computational Storage
                 draft-cel-nfsv4-comp-stor-reqs-latest

Abstract

   This document introduces an architecture for supporting Computational
   Storage on Network File System version 4 (NFS) servers and clients.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 26, 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Lever                   Expires October 26, 2019                [Page 1]

Internet-Draft        Computational Storage for NFS           April 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3
   3.  Parameters  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   4
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   4
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   4
     6.2.  Informative References  . . . . . . . . . . . . . . . . .   4
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   4
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Introduction

   True computational storage conforms to one or both of the following
   criteria:

   o  Compute resources co-located with data storage leverages a high
      bandwidth link between storage and local compute.

   o  Compute resources co-located with data storage reduces interrupt
      or data bandwidth needed between storage and host.

   There are several broad use cases for computation offloaded to
   storage:

   Search:  Examples include SQL offload, a machine learning inference
      engine co-located with its dataset, or performing a "find"
      operation without pulling an entire filesystem's data to a client.

   Filtering:  Also known as data transformation.  Examples include
      compression, transcoding, and encryption.

   Data Management:  This might be a control plane that permits
      administrative actions such as instantiating a transfer to cold
      storage, integrity measurement (scrubbing), or creating a snapshot
      of a particular file.

   For NFS, the mission of computational storage techniques is to reduce
   network utilization between an NFS server and its clients.  NFSv4.2
   [RFC7862] already applies this approach -- features new to NFSv4.2
   include copy offload and file initialization (ALLOCATE), both of
   which are intended to prevent extra data round-trips between clients
   and server.






Lever                   Expires October 26, 2019                [Page 2]

Internet-Draft        Computational Storage for NFS           April 2019


   The purpose of the current document is to provide a framework for
   discussing and reasoning about computational storage relative to the
   NFS protocol.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Parameters

   For various reasons, we do not want to require changes to the NFS
   protocol to expose computational resources.  Instead, an NFS server
   host can advertise alternate RPC programs which allow NFS clients
   access to the server's computational services in a structured
   fashion.  The underlying assumption is that such computation runs
   faster on a host that can access file data directly rather than via
   NFS.

   We expect that computational storage applications are outside the
   realm of POSIX, and therefore would be triggered directly by user
   space programs rather than exclusively through a POSIX-based NFS
   client.  This is one reason that a side-channel approach is
   preferred, rather than extending the NFS protocol itself.

   An important class of input and output parameters for these remote
   procedures are objects (e.g. files and directories) that exist in a
   filesystem that is shared via NFS.  When they are local, such objects
   can be referenced by filehandle and optionally a range of bytes.  To
   reference a remote object, either an NFS URI (defined in
   Section 2.8.1 of [RFC7532]) or a tuple consisting of a network
   address and a filehandle may be used.

   Serialization is often necessary to prevent an offload agent from
   colliding with access by standard NFS clients.  Open state or a
   delegation might be necessary for this purpose.

   As an example, suppose an RPC program is constructed to enable the
   encryption and decryption of files on an NFS server.  The arguments
   to the encryption and decryption verbs might include an input
   filehandle, an output filehandle (or an indication that the transform
   should occur in place), the selection of a cipher algorithm, and a
   key.  The result would be an indication of success or failure.  No
   data is transferred between the requesting client and the server
   where the input and output files reside.



Lever                   Expires October 26, 2019                [Page 3]

Internet-Draft        Computational Storage for NFS           April 2019


4.  Security Considerations

   Unlike most block storage, NFS is typically deployed on open networks
   rather than environments with limited access (such as a PCIe bus).
   More attention must be focused on security.  In particular:

   o  A trust relationship must exist between clients and servers.  For
      example, how would clients be certain that the server has actually
      encrypted a file's content?

   o  There will need to be a mechanism for authorizing offload agents
      to access file data on behalf of authenticated users.

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC7532]  Lentini, J., Tewari, R., and C. Lever, Ed., "Namespace
              Database (NSDB) Protocol for Federated File Systems",
              RFC 7532, DOI 10.17487/RFC7532, March 2015,
              <https://www.rfc-editor.org/info/rfc7532>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

6.2.  Informative References

   [RFC7862]  Haynes, T., "Network File System (NFS) Version 4 Minor
              Version 2 Protocol", RFC 7862, DOI 10.17487/RFC7862,
              November 2016, <https://www.rfc-editor.org/info/rfc7862>.

Acknowledgments

   The author is grateful to Bill Baker, Greg Marsden, and Jim Williams
   for their input and support of this work.






Lever                   Expires October 26, 2019                [Page 4]

Internet-Draft        Computational Storage for NFS           April 2019


   Special thanks go to Transport Area Director Magnus Westerlund, NFSV4
   Working Group Chairs Spencer Shepler and Brian Pawlowski, and NFSV4
   Working Group Secretary Thomas Haynes for their support.

Author's Address

   Charles Lever
   Oracle Corporation
   United States of America

   Email: chuck.lever@oracle.com








































Lever                   Expires October 26, 2019                [Page 5]
